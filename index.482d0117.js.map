{"mappings":"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","sources":["src/index.js","src/js/load-pop-movies.js","src/js/load-pop-clicked-page.js","src/js/make-pop-pagination-markup.js","src/js/load-requested-movies.js","src/js/load-requested-clicked-page.js","src/js/make-requested-pagination-markup.js"],"sourcesContent":["import './js/loader';\nimport './js/load-pop-movies';\nimport './js/load-requested-movies';\n\n\nimport './js/open-close-movie-modal';\nimport './js/load-clicked-movie';\nimport './js/modal-footer-window';\n\nclass Asd {\n    constructor({a}) {\n        this.a = a;\n        this.b = \"lkn\";\n        this.c = 3;\n    }\n} \n\nconst df = 5\n\nconst qwe = new Asd({a: df})\n\n","import { oneCardMarkup } from './one-card-markup';\nimport { TheMovieDb } from './fetch';\nimport { getTheMoviesTargetInfo } from './get-movies-target-info';\nimport { makePopPaginationMarkup } from './make-pop-pagination-markup';\n\nconst fetchMovies = new TheMovieDb()\n\nasync function loadPopMovies() {\n    try {\n        const ApiReply = await fetchMovies.fetchPopularMovies(\"1\");\n\n        const foundMovies = ApiReply.results;\n        const foundMoviesIds = foundMovies.map(film => film.id);\n        const filmsToRender = await getTheMoviesTargetInfo(foundMoviesIds);\n\n        const markup = await filmsToRender.map(film => {\n            return oneCardMarkup(film);\n        }).join('');\n\n        const containerMainPage = document.querySelector('.film-grid');\n        containerMainPage.innerHTML = markup;\n\n        makePopPaginationMarkup(ApiReply)\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nloadPopMovies();","import { TheMovieDb } from \"./fetch.js\"\nimport { oneCardMarkup } from './one-card-markup';\nimport { getTheMoviesTargetInfo } from './get-movies-target-info';\nimport { makePopPaginationMarkup, paginationWrapper } from './make-pop-pagination-markup';\n\nasync function loadPopClickedPage(e) {\n    e.preventDefault();\n\n    const clickedPage = e.target.textContent;\n    const fetchMovies = new TheMovieDb()\n\n    paginationWrapper.innerHTML = '';\n\n    try {\n        const ApiReply = await fetchMovies.fetchPopularMovies(clickedPage);\n\n        const foundMovies = ApiReply.results;\n        const foundMoviesIds = foundMovies.map(film => film.id);\n        const FilmsToRender = await getTheMoviesTargetInfo(foundMoviesIds);\n\n        const markup = await FilmsToRender.map(film => {\n            return oneCardMarkup(film);\n        }).join('');\n\n        const containerMainPage = document.querySelector('.film-grid');\n        containerMainPage.innerHTML = markup;\n\n        makePopPaginationMarkup(ApiReply);\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport { loadPopClickedPage }\n","import { loadPopClickedPage } from \"./load-pop-clicked-page\"\nconst paginationWrapper = document.getElementById('pagination');\n\nfunction makePopPaginationMarkup(ApiReply) {\n    paginationWrapper.innerHTML = '';\n    const pageAmount = ApiReply.total_pages;\n    const currentPage = ApiReply.page\n\n    // початок сторінок\n    if (currentPage === 1) {\n        for (let i = currentPage; i < currentPage + 5; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    }\n\n    // кінець сторінок\n    if (currentPage === pageAmount) {\n        for (let i = currentPage - 4; i < currentPage; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    } else if (currentPage === pageAmount - 1) {\n        for (let i = currentPage - 3; i < currentPage + 1; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    } else if (currentPage === pageAmount - 2) {\n        for (let i = currentPage - 2; i < currentPage + 2; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    }\n\n    // середина сторінок (за замовчуванням)\n    if (currentPage >= 2 && currentPage <= pageAmount - 3) {\n        for (let i = currentPage - 1; i < currentPage + 4; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    }\n\n    const buttons = document.querySelectorAll(\".page-button\")\n\n    for (let i = 0; i < buttons.length; i++) {\n        if (buttons[i].textContent == ApiReply.page) {\n            //якщо поточна сторінка дорівнює конкретної сторінкі масиву\n            buttons[i].classList.add(\"btn-active\");\n        }\n    }\n    paginationWrapper.addEventListener(\"click\", loadPopClickedPage)\n\n}\n\n// function addRequestListener() {\n//     paginationWrapper.addEventListener(\"click\", loadRequestedClickedPage)\n// }\n\n\n\nexport { makePopPaginationMarkup, paginationWrapper }\n","import { oneCardMarkup } from './one-card-markup';\nimport { TheMovieDb } from './fetch';\nimport { getTheMoviesTargetInfo } from './get-movies-target-info';\nimport { showLoader, hideLoader } from './loader';\nimport {makeRequestedPaginationMarkup} from './make-requested-pagination-markup'\n\nconst fetchMovies = new TheMovieDb();\n\nconst page = 1\n\nasync function loadRequestedMovies(e) {\n    e.preventDefault();\n    const containerMainPage = document.querySelector('.film-grid');\n    containerMainPage.innerHTML = '';\n    showLoader();\n\n    inputEl = document.querySelector('.input');\n\n    const query = inputEl.value;\n\n    try {\n        const ApiReply = await fetchMovies.fetchRequestedMovies(query, page);\n        const foundMovies = ApiReply.results;\n        if (foundMovies.length === 0) {\n            alert(`the film \"${query} is not exist`)\n        }\n        const foundMoviesIds = foundMovies.map(film => film.id);\n        const filmsToRender = await getTheMoviesTargetInfo(foundMoviesIds);\n\n        const markup = await filmsToRender.map(film => {\n            return oneCardMarkup(film);\n        }).join('');\n\n        hideLoader();\n        containerMainPage.innerHTML = markup;\n        makeRequestedPaginationMarkup(ApiReply)\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nconst form = document.querySelector('.search-form');\nform.addEventListener('submit', loadRequestedMovies);\n","import { oneCardMarkup } from './one-card-markup';\nimport { TheMovieDb } from './fetch';\nimport { getTheMoviesTargetInfo } from './get-movies-target-info';\nimport { showLoader, hideLoader } from './loader';\nimport { makeRequestedPaginationMarkup } from './make-requested-pagination-markup';\n\n\nasync function loadRequestedClickedPage(e) {\n    e.preventDefault();\n\n    const clickedPage = e.target.textContent;\n    const fetchMovies = new TheMovieDb();\n\n    const containerMainPage = document.querySelector('.film-grid');\n    containerMainPage.innerHTML = '';\n    showLoader();\n\n    inputEl = document.querySelector('.input');\n\n    const query = inputEl.value;\n\n    try {\n        const ApiReply = await fetchMovies.fetchRequestedMovies(query, clickedPage);\n// console.log(ApiReply)\n        const foundMovies = ApiReply.results;\n        const foundMoviesIds = foundMovies.map(film => film.id);\n        const filmsToRender = await getTheMoviesTargetInfo(foundMoviesIds);\n\n        const markup = await filmsToRender.map(film => {\n            return oneCardMarkup(film);\n        }).join('');\n\n        hideLoader();\n        containerMainPage.innerHTML = markup;\n\n        makeRequestedPaginationMarkup(ApiReply)\n        // addRequestListener()\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport { loadRequestedClickedPage }","import { loadRequestedClickedPage } from \"./load-requested-clicked-page\"\n\nconst paginationWrapper = document.getElementById('pagination');\n\nfunction makeRequestedPaginationMarkup(ApiReply) {\n    paginationWrapper.innerHTML = '';\n    const pageAmount = ApiReply.total_pages;\n    const currentPage = ApiReply.page\n\n    // початок сторінок\n    if (currentPage === 1) {\n        for (let i = currentPage; i < currentPage + 5; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    }\n\n    // кінець сторінок\n    if (currentPage === pageAmount) {\n        for (let i = currentPage - 4; i < currentPage; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    } else if (currentPage === pageAmount - 1) {\n        for (let i = currentPage - 3; i < currentPage + 1; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    } else if (currentPage === pageAmount - 2) {\n        for (let i = currentPage - 2; i < currentPage + 2; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    }\n\n    // середина сторінок (за замовчуванням)\n    if (currentPage >= 2 && currentPage <= pageAmount - 3) {\n        for (let i = currentPage - 1; i < currentPage + 4; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    }\n\n    // якщо мало\n    if (pageAmount === 1) {\n        paginationWrapper.innerHTML = '';\n    } else if (pageAmount >= 2 && pageAmount <= 10) {\n        paginationWrapper.innerHTML = '';\n\n        for (let i = 1; i < pageAmount; i++) {\n            paginationWrapper.insertAdjacentHTML(\"beforeend\", `<button class=\"page-button\">${i}</button>`)\n        }\n    }\n\n    const buttons = document.querySelectorAll(\".page-button\")\n\n    for (let i = 0; i < buttons.length; i++) {\n        if (buttons[i].textContent == ApiReply.page) {\n            //якщо поточна сторінка дорівнює конкретної сторінкі масиву\n            buttons[i].classList.add(\"btn-active\");\n        }\n    }\n    // paginationWrapper.addEventListener(\"click\", loadPopClickedPage)\n    paginationWrapper.addEventListener(\"click\", loadRequestedClickedPage)\n\n}\n\nexport { makeRequestedPaginationMarkup }\n"],"names":["parcelRequire","$2lwSF","$cyIMT","async","$10704408346639e2$export$2040a98360ce4f79","e","preventDefault","clickedPage","target","textContent","fetchMovies","TheMovieDb","$bab3301e11f37823$export$2304dc97c2330b66","innerHTML","ApiReply","fetchPopularMovies","foundMoviesIds","results","map","film","id","FilmsToRender","$j4fo9","getTheMoviesTargetInfo","markup","oneCardMarkup","join","document","querySelector","$bab3301e11f37823$export$cc94cbd10d3a3904","error","console","log","getElementById","pageAmount","total_pages","currentPage","page","i","insertAdjacentHTML","i1","i2","i3","i4","buttons","querySelectorAll","i5","length","classList","add","addEventListener","$18402dbbc62969eb$var$fetchMovies","filmsToRender","$18402dbbc62969eb$var$loadPopMovies","$0e249c519888a6f7$export$13a130d6db9f7f4e","containerMainPage","$gjiCh","showLoader","inputEl","query","value","fetchRequestedMovies","hideLoader","$446fde514478581a$export$ab3e04bc349ba1b2","$446fde514478581a$var$paginationWrapper","$ff7539a23657a87c$var$fetchMovies","foundMovies","alert","constructor","a","this","b","c"],"version":3,"file":"index.482d0117.js.map"}